#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Feb 12 17:02:04 2020

@author: srudd
"""

import pandas as pd
import numpy as np
import sys


tuple_map = pd.DataFrame({"op": ["M", "I", "D", "N", "S", "H", "P", "=", "X"],
                          "query": [1, 1, 0, 0, 1, 0, 0, 1, 1],
                          "reference": [1, 0, 1, 1, 0, 0, 0, 1, 1]},
                         index=[0, 1, 2, 3, 4, 5, 6, 7, 8])


def build_position_map(cigar_tuple):
    """
    Prepare a matrix of positions from provided pysam cigar_tuple.

    Parameters
    ----------
    cigar_tuple: tuple of operations and lengths
        This is expected to be produced by pysam package

    Returns
    -------
    pandas DataFrame
        With columns for downstream processing ...
    """
    if isinstance(cigar_tuple, str):
        cigar_tuple = eval(cigar_tuple)

    feature = [i[0] for i in cigar_tuple]
    repeats = [i[1] for i in cigar_tuple]

    source = np.repeat(feature, repeats)
    key = tuple_map.iloc[source]["op"]
    q_type = tuple_map.iloc[source]["query"]
    r_type = tuple_map.iloc[source]["reference"]
    q_posn = np.cumsum(q_type)
    r_posn = np.cumsum(r_type)

    return pd.DataFrame({"q_posn": q_posn,
                         # "source": source,
                         "operation": key,
                         # "q_type": q_type,
                         # "r_type": r_type,
                         "r_posn": r_posn})


def cigar_q_to_r(poi, cigar_tuple):
    """
    Given a coordinate of interest and a cigar_tuple return reference_coord.

    Parameters
    ----------
    poi: int
        position of interest.
    cigar_tuple: list of tuple
        The tuple object as prepared by pysam.

    Raises
    ------
    ValueError
        It is possible that there are some features beyond coded - hopefully
        this will help me catch the exceptions.

    Returns
    -------
    cigar operation
        operation at the query position of interest.
    int
        the corresponding coordinate on the reference genome.

    """
    pmap = build_position_map(cigar_tuple)
    matches = pmap[pmap.q_posn == poi]
    if len(matches.index) > 1:
        m_matches = matches[matches.operation == "M"]
        if len(m_matches.index) != 1:
            print(matches)
            raise ValueError("The SAM coordinates are beyond experience")
        idx = m_matches.index[0]
        return m_matches["operation"][idx], m_matches["r_posn"][idx]
    idx = matches.index[0]
    return matches["operation"][idx], matches["r_posn"][idx]



class cigar_rle:

    def __init__(self, cigar_tuple):
        self.cigar = cigar_tuple
        self.pmap = build_position_map(cigar_tuple)
        self.pmap.set_index("q_posn", drop=False, inplace=True)

    def q_to_r(self, poi):
        matches = self.pmap.loc[poi]
        if isinstance(matches, pd.Series):
            return matches.operation, matches.r_posn
        else:
            if matches.operation.isin(["M"]).any():
                mmatches = matches.loc[matches.operation == "M"].iloc[0]
                return mmatches.operation, mmatches.r_posn
            else:
                # if we are here there are multiple CIGAR operations at this
                # locus and none of them correspond to a "M" - we're likely to
                # junk this entry anyhow - let's just return the first entry
                fmatches = matches.iloc[0]
                return fmatches.operation, fmatches.r_posn

        
        
if __name__ == '__main__':
    c = cigar_rle("[(4, 30), (0, 72), (2, 1), (0, 10), (1, 1), (0, 13), (1, 2), (0, 43), (2, 1), (0, 127), (2, 1), (0, 5), (1, 1), (0, 15), (2, 1), (0, 23), (1, 1), (0, 31), (2, 1), (0, 87), (2, 2), (0, 20), (2, 1), (0, 46), (2, 1), (0, 19), (2, 3), (0, 98), (2, 1), (0, 102), (1, 3), (0, 1), (2, 1), (0, 33), (1, 1), (0, 19), (2, 1), (0, 2), (1, 1), (0, 1), (2, 2), (0, 59), (2, 1), (0, 86), (1, 1), (0, 88), (2, 1), (0, 91), (2, 1), (0, 4), (1, 1), (0, 64), (1, 1), (0, 66), (2, 1), (0, 11), (1, 1), (0, 12), (2, 1), (0, 44), (2, 1), (0, 12), (2, 1), (0, 25), (1, 1), (0, 7), (1, 1), (0, 4), (2, 1), (0, 28), (2, 3), (0, 37), (2, 2), (0, 21), (2, 1), (0, 95), (2, 1), (0, 17), (1, 1), (0, 47), (1, 6), (0, 1), (2, 1), (0, 15), (2, 2), (0, 2), (2, 1), (0, 64), (1, 2), (0, 12), (2, 1), (0, 35), (1, 2), (0, 94), (1, 2), (0, 50), (1, 2), (0, 10), (2, 2), (0, 9), (2, 1), (0, 35), (1, 4), (0, 39), (2, 1), (0, 50), (2, 1), (0, 20), (1, 1), (0, 24), (2, 2), (0, 12), (2, 2), (0, 14), (2, 1), (0, 37), (1, 1), (0, 8), (2, 1), (0, 24), (2, 1), (0, 8), (1, 1), (0, 17), (2, 5), (0, 104), (2, 1), (0, 6), (2, 1), (0, 8), (1, 2), (0, 36), (1, 2), (0, 42), (2, 1), (0, 18), (1, 1), (0, 38), (1, 1), (0, 6), (1, 1), (0, 67), (1, 1), (0, 77), (2, 4), (0, 1), (2, 1), (0, 7), (1, 2), (0, 12), (1, 1), (0, 11), (2, 1), (0, 12), (2, 1), (0, 85), (1, 1), (0, 32), (2, 1), (0, 85), (2, 2), (0, 79), (2, 2), (0, 92), (2, 1), (0, 35), (1, 1), (0, 26), (2, 1), (0, 148), (2, 1), (0, 28), (2, 1), (0, 17), (2, 1), (0, 2), (2, 1), (0, 32), (2, 1), (0, 175), (1, 1), (0, 90), (1, 3), (0, 87), (2, 1), (0, 12), (2, 1), (0, 183), (1, 1), (0, 21), (2, 1), (0, 76), (2, 1), (0, 33), (1, 1), (0, 13), (1, 1), (0, 7), (2, 1), (0, 27), (1, 1), (0, 3), (2, 2), (0, 6), (2, 2), (0, 50), (2, 2), (0, 43), (2, 1), (0, 33), (1, 2), (0, 97), (2, 1), (0, 89), (2, 1), (0, 16), (2, 6), (0, 11), (1, 1), (0, 8), (1, 2), (0, 51), (1, 1), (0, 26), (1, 1), (0, 68), (1, 1), (0, 4), (1, 2), (0, 22), (1, 1), (0, 15), (1, 1), (0, 11), (1, 2), (0, 38), (2, 1), (0, 26), (2, 2), (0, 23), (1, 2), (0, 29), (2, 1), (0, 5), (2, 1), (0, 15), (1, 3), (0, 17), (2, 1), (0, 29), (2, 1), (0, 5), (1, 1), (0, 47), (1, 1), (0, 21), (2, 1), (0, 43), (2, 2), (0, 25), (2, 1), (0, 59), (2, 2), (0, 33), (1, 1), (0, 82), (2, 1), (0, 21), (2, 1), (0, 22), (2, 1), (0, 11), (2, 2), (0, 18), (2, 1), (0, 5), (1, 1), (0, 19), (2, 1), (0, 60), (2, 1), (0, 12), (1, 1), (0, 23), (2, 1), (0, 10), (1, 1), (0, 37), (2, 1), (0, 47), (1, 1), (0, 32), (1, 1), (0, 15), (2, 2), (0, 11), (1, 1), (0, 11), (2, 1), (0, 7), (2, 3), (0, 59), (1, 1), (0, 28), (2, 1), (0, 21), (2, 2), (0, 19), (2, 1), (0, 19), (2, 1), (0, 27), (2, 2), (0, 28), (2, 3), (0, 21), (2, 2), (0, 36), (2, 1), (0, 53), (2, 1), (0, 4), (1, 1), (0, 42), (2, 1), (0, 5), (2, 2), (0, 46), (2, 8), (0, 20), (2, 1), (0, 5), (2, 1), (0, 23), (2, 1), (0, 5), (2, 1), (0, 7), (2, 3), (0, 9), (2, 1), (0, 3), (2, 1), (0, 95), (2, 1), (0, 33), (2, 1), (0, 22), (1, 1), (0, 20), (2, 3), (0, 40), (2, 1), (0, 15), (2, 2), (0, 6), (1, 1), (0, 17), (2, 2), (0, 10), (2, 3), (0, 99), (1, 1), (0, 55), (2, 4), (0, 17), (2, 1), (0, 135), (2, 1), (0, 11), (1, 2), (0, 44), (1, 1), (0, 10), (2, 1), (0, 6), (1, 2), (0, 7), (1, 3), (0, 4), (1, 3), (0, 7), (2, 2), (0, 58), (2, 1), (0, 2), (2, 1), (0, 5), (1, 1), (0, 7), (2, 2), (0, 16), (2, 1), (0, 24), (2, 3), (0, 8), (2, 2), (0, 39), (2, 1), (0, 4), (2, 2), (0, 19), (2, 1), (0, 24), (2, 1), (0, 3), (1, 2), (0, 13), (2, 1), (0, 21), (2, 2), (0, 11), (1, 1), (0, 52), (1, 2), (0, 62), (2, 1), (0, 65), (2, 1), (0, 7), (1, 2), (0, 31), (1, 1), (0, 154), (1, 2), (0, 20), (2, 1), (0, 10), (1, 1), (0, 28), (1, 1), (0, 7), (2, 2), (0, 7), (1, 1), (0, 13), (2, 2), (0, 108), (2, 2), (0, 35), (2, 1), (0, 4), (2, 1), (0, 39), (1, 1), (0, 4), (1, 1), (0, 5), (1, 2), (0, 67), (1, 1), (0, 7), (2, 1), (0, 74), (2, 1), (0, 42), (2, 1), (0, 12), (2, 2), (0, 48), (2, 1), (0, 6), (2, 1), (0, 22), (2, 3), (0, 52), (2, 2), (0, 22), (1, 2), (0, 20), (1, 1), (0, 69), (2, 2), (0, 3), (1, 2), (0, 86), (2, 2), (0, 46), (2, 1), (0, 95), (2, 2), (0, 113), (1, 1), (0, 68), (2, 1), (0, 19), (1, 1), (0, 72), (1, 1), (0, 3), (2, 5), (0, 20), (1, 1), (0, 17), (2, 1), (0, 20), (2, 2), (0, 17), (2, 1), (0, 13), (1, 1), (0, 71), (2, 2), (0, 2), (1, 3), (0, 93), (2, 1), (0, 29), (2, 1), (0, 47), (2, 1), (0, 48), (2, 1), (0, 12), (2, 1), (0, 8), (2, 2), (0, 10), (2, 1), (0, 33), (2, 1), (0, 8), (2, 1), (0, 60), (1, 1), (0, 16), (2, 1), (0, 56), (2, 1), (0, 3), (2, 3), (0, 30), (2, 1), (0, 29), (1, 1), (0, 4), (1, 1), (0, 36), (1, 2), (0, 46), (2, 1), (0, 19), (1, 2), (0, 21), (2, 1), (0, 10), (2, 2), (0, 27), (2, 1), (0, 109), (2, 3), (0, 17), (1, 1), (0, 11), (2, 1), (0, 24), (2, 1), (0, 3), (2, 1), (0, 60), (1, 1), (0, 1), (1, 1), (0, 11), (1, 1), (0, 3), (2, 1), (0, 50), (1, 1), (0, 7), (2, 1), (0, 75), (1, 1), (0, 16), (2, 1), (0, 32), (2, 1), (0, 56), (1, 1), (0, 38), (2, 1), (0, 20), (2, 3), (0, 3), (2, 1), (0, 14), (1, 1), (0, 6), (2, 1), (0, 30), (2, 5), (0, 13), (2, 1), (0, 22), (2, 1), (0, 10), (2, 3), (0, 16), (1, 2), (0, 7), (1, 1), (0, 3), (1, 1), (0, 4), (2, 1), (0, 45), (2, 4), (0, 47), (1, 1), (0, 11), (1, 1), (0, 9), (2, 1), (0, 6), (2, 1), (0, 6), (1, 1), (0, 13), (2, 1), (0, 20), (1, 1), (0, 87), (2, 1), (0, 39), (1, 3), (0, 40), (1, 2), (0, 18), (1, 3), (0, 9), (1, 1), (0, 4), (2, 1), (0, 29), (1, 1), (0, 14), (2, 7), (0, 2), (2, 1), (0, 26), (2, 1), (0, 7), (2, 2), (0, 93), (1, 1), (0, 48), (2, 1), (0, 29), (1, 2), (0, 4), (1, 1), (0, 21), (2, 1), (0, 29), (2, 1), (0, 73), (2, 1), (0, 22), (2, 2), (0, 19), (2, 2), (0, 26), (2, 2), (0, 38), (1, 2), (0, 2), (2, 1), (0, 6), (2, 1), (0, 10), (1, 2), (0, 27), (2, 1), (0, 5), (2, 1), (0, 5), (2, 1), (0, 13), (1, 1), (0, 90), (2, 1), (0, 29), (1, 1), (0, 6), (2, 1), (0, 37), (1, 2), (0, 65), (2, 1), (0, 53), (2, 3), (0, 30), (2, 1), (0, 34), (2, 2), (0, 24), (2, 3), (0, 82), (1, 1), (0, 71), (2, 1), (0, 11), (2, 1), (0, 53), (2, 2), (0, 74), (2, 1), (0, 32), (2, 3), (0, 28), (2, 1), (0, 74), (1, 1), (0, 4), (2, 1), (0, 4), (1, 1), (0, 79), (2, 1), (0, 9), (4, 14)]")
    print(c.pmap)
    print((c.q_to_r(803)))
    
    
